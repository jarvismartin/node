{"ts":1376806363826,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/bin/sh\n\n# A word about this shell script:\n#\n# It must work everywhere, including on systems that lack\n# a /bin/bash, map 'sh' to ksh, ksh97, bash, ash, or zsh,\n# and potentially have either a posix shell or bourne\n# shell living at /bin/sh.\n#\n# See this helpful document on writing portable shell scripts:\n# http://www.gnu.org/s/hello/manual/autoconf/Portable-Shell.html\n#\n# The only shell it won't ever work on is cmd.exe.\n\nif [ \"x$0\" = \"xsh\" ]; then\n  # run as curl | sh\n  # on some systems, you can just do cat>npm-install.sh\n  # which is a bit cuter.  But on others, &1 is already closed,\n  # so catting to another script file won't do anything.\n  curl -s https://npmjs.org/install.sh > npm-install-$$.sh\n  sh npm-install-$$.sh\n  ret=$?\n  rm npm-install-$$.sh\n  exit $ret\nfi\n\n# See what \"npm_config_*\" things there are in the env,\n# and make them permanent.\n# If this fails, it's not such a big deal.\nconfigures=\"`env | grep 'npm_config_' | sed -e 's|^npm_config_||g'`\"\n\nnpm_config_loglevel=\"error\"\nif [ \"x$npm_debug\" = \"x\" ]; then\n  (exit 0)\nelse\n  echo \"Running in debug mode.\"\n  echo \"Note that this requires bash or zsh.\"\n  set -o xtrace\n  set -o pipefail\n  npm_config_loglevel=\"verbose\"\nfi\nexport npm_config_loglevel\n\n# make sure that node exists\nnode=`which node 2>&1`\nret=$?\nif [ $ret -eq 0 ] && [ -x \"$node\" ]; then\n  (exit 0)\nelse\n  echo \"npm cannot be installed without nodejs.\" >&2\n  echo \"Install node first, and then try again.\" >&2\n  echo \"\" >&2\n  echo \"Maybe node is installed, but not in the PATH?\" >&2\n  echo \"Note that running as sudo can change envs.\" >&2\n  echo \"\"\n  echo \"PATH=$PATH\" >&2\n  exit $ret\nfi\n\n# set the temp dir\nTMP=\"${TMPDIR}\"\nif [ \"x$TMP\" = \"x\" ]; then\n  TMP=\"/tmp\"\nfi\nTMP=\"${TMP}/npm.$$\"\nrm -rf \"$TMP\" || true\nmkdir \"$TMP\"\nif [ $? -ne 0 ]; then\n  echo \"failed to mkdir $TMP\" >&2\n  exit 1\nfi\n\nBACK=\"$PWD\"\n\nret=0\ntar=\"${TAR}\"\nif [ -z \"$tar\" ]; then\n  tar=\"${npm_config_tar}\"\nfi\nif [ -z \"$tar\" ]; then\n  tar=`which tar 2>&1`\n  ret=$?\nfi\n\nif [ $ret -eq 0 ] && [ -x \"$tar\" ]; then\n  echo \"tar=$tar\"\n  echo \"version:\"\n  $tar --version\n  ret=$?\nfi\n\nif [ $ret -eq 0 ]; then\n  (exit 0)\nelse\n  echo \"No suitable tar program found.\"\n  exit 1\nfi\n\n\n\n# Try to find a suitable make\n# If the MAKE environment var is set, use that.\n# otherwise, try to find gmake, and then make.\n# If no make is found, then just execute the necessary commands.\n\n# XXX For some reason, make is building all the docs every time.  This\n# is an annoying source of bugs. Figure out why this happens.\nMAKE=NOMAKE\n\nif [ \"x$MAKE\" = \"x\" ]; then\n  make=`which gmake 2>&1`\n  if [ $? -eq 0 ] && [ -x $make ]; then\n    (exit 0)\n  else\n    make=`which make 2>&1`\n    if [ $? -eq 0 ] && [ -x $make ]; then\n      (exit 0)\n    else\n      make=NOMAKE\n    fi\n  fi\nelse\n  make=\"$MAKE\"\nfi\n\nif [ -x \"$make\" ]; then\n  (exit 0)\nelse\n  # echo \"Installing without make. This may fail.\" >&2\n  make=NOMAKE\nfi\n\n# If there's no bash, then don't even try to clean\nif [ -x \"/bin/bash\" ]; then\n  (exit 0)\nelse\n  clean=\"no\"\nfi\n\nnode_version=`\"$node\" --version 2>&1`\nret=$?\nif [ $ret -ne 0 ]; then\n  echo \"You need node to run this program.\" >&2\n  echo \"node --version reports: $node_version\" >&2\n  echo \"with exit code = $ret\" >&2\n  echo \"Please install node before continuing.\" >&2\n  exit $ret\nfi\n\nt=\"${npm_install}\"\nif [ -z \"$t\" ]; then\n  # switch based on node version.\n  # note that we can only use strict sh-compatible patterns here.\n  case $node_version in\n    0.[0123].* | v0.[0123].*)\n      echo \"You are using an outdated and unsupported version of\" >&2\n      echo \"node ($node_version).  Please update node and try again.\" >&2\n      exit 99\n      ;;\n    v0.[45].* | 0.[45].*)\n      echo \"install npm@1.0\"\n      t=1.0\n      ;;\n    v0.[678].* | 0.[678].*)\n      echo \"install npm@1.1\"\n      t=1.1\n      ;;\n    *)\n      echo \"install npm@latest\"\n      t=\"latest\"\n      ;;\n  esac\nfi\n\n# the npmca cert\ncacert='\n-----BEGIN CERTIFICATE-----\nMIIChzCCAfACCQDauvz/KHp8ejANBgkqhkiG9w0BAQUFADCBhzELMAkGA1UEBhMC\nVVMxCzAJBgNVBAgTAkNBMRAwDgYDVQQHEwdPYWtsYW5kMQwwCgYDVQQKEwNucG0x\nIjAgBgNVBAsTGW5wbSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxDjAMBgNVBAMTBW5w\nbUNBMRcwFQYJKoZIhvcNAQkBFghpQGl6cy5tZTAeFw0xMTA5MDUwMTQ3MTdaFw0y\nMTA5MDIwMTQ3MTdaMIGHMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEDAOBgNV\nBAcTB09ha2xhbmQxDDAKBgNVBAoTA25wbTEiMCAGA1UECxMZbnBtIENlcnRpZmlj\nYXRlIEF1dGhvcml0eTEOMAwGA1UEAxMFbnBtQ0ExFzAVBgkqhkiG9w0BCQEWCGlA\naXpzLm1lMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLI4tIqPpRW+ACw9GE\nOgBlJZwK5f8nnKCLK629Pv5yJpQKs3DENExAyOgDcyaF0HD0zk8zTp+ZsLaNdKOz\nGn2U181KGprGKAXP6DU6ByOJDWmTlY6+Ad1laYT0m64fERSpHw/hjD3D+iX4aMOl\ny0HdbT5m1ZGh6SJz3ZqxavhHLQIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAC4ySDbC\nl7W1WpLmtLGEQ/yuMLUf6Jy/vr+CRp4h+UzL+IQpCv8FfxsYE7dhf/bmWTEupBkv\nyNL18lipt2jSvR3v6oAHAReotvdjqhxddpe5Holns6EQd1/xEZ7sB1YhQKJtvUrl\nZNufy1Jf1r0ldEGeA+0ISck7s+xSh9rQD2Op\n-----END CERTIFICATE-----\n'\n\necho \"$cacert\" > \"$TMP/cafile.crt\"\ncacert=\"$TMP/cafile.crt\"\n\n# need to echo \"\" after, because Posix sed doesn't treat EOF\n# as an implied end of line.\nurl=`(curl -SsL --cacert \"$cacert\" https://registry.npmjs.org/npm/$t; echo \"\") \\\n     | sed -e 's/^.*tarball\":\"//' \\\n     | sed -e 's/\".*$//'`\n\nret=$?\nif [ \"x$url\" = \"x\" ]; then\n  ret=125\n  # try without the -e arg to sed.\n  url=`(curl -SsL --cacert \"$cacert\" https://registry.npmjs.org/npm/$t; echo \"\") \\\n       | sed 's/^.*tarball\":\"//' \\\n       | sed 's/\".*$//'`\n  ret=$?\n  if [ \"x$url\" = \"x\" ]; then\n    ret=125\n  fi\nfi\nif [ $ret -ne 0 ]; then\n  echo \"Failed to get tarball url for npm/$t\" >&2\n  exit $ret\nfi\n\n\necho \"fetching: $url\" >&2\n\ncd \"$TMP\" \\\n  && curl -SsL --cacert \"$cacert\" \"$url\" \\\n     | $tar -xzf - \\\n  && rm \"$cacert\" \\\n  && cd \"$TMP\"/* \\\n  && (req=`\"$node\" bin/read-package-json.js package.json engines.node`\n      if [ -d node_modules ]; then\n        \"$node\" node_modules/semver/bin/semver -v \"$node_version\" -r \"$req\"\n        ret=$?\n      else\n        \"$node\" bin/semver.js -v \"$node_version\" -r \"$req\"\n        ret=$?\n      fi\n      if [ $ret -ne 0 ]; then\n        echo \"You need node $req to run this program.\" >&2\n        echo \"node --version reports: $node_version\" >&2\n        echo \"Please upgrade node before continuing.\" >&2\n        exit $ret\n      fi) \\\n  && (ver=`\"$node\" bin/read-package-json.js package.json version`\n      isnpm10=0\n      if [ $ret -eq 0 ]; then\n        req=`\"$node\" bin/read-package-json.js package.json engines.node`\n        if [ -d node_modules ]; then\n          if \"$node\" node_modules/semver/bin/semver -v \"$ver\" -r \"1\"\n          then\n            isnpm10=1\n          fi\n        else\n          if \"$node\" bin/semver -v \"$ver\" -r \">=1.0\"; then\n            isnpm10=1\n          fi\n        fi\n      fi\n\n      ret=0\n      if [ $isnpm10 -eq 1 ] && [ -f \"scripts/clean-old.sh\" ]; then\n        if [ \"x$skipclean\" = \"x\" ]; then\n          (exit 0)\n        else\n          clean=no\n        fi\n        if [ \"x$clean\" = \"xno\" ] \\\n            || [ \"x$clean\" = \"xn\" ]; then\n          echo \"Skipping 0.x cruft clean\" >&2\n          ret=0\n        elif [ \"x$clean\" = \"xy\" ] || [ \"x$clean\" = \"xyes\" ]; then\n          NODE=\"$node\" /bin/bash \"scripts/clean-old.sh\" \"-y\"\n          ret=$?\n        else\n          NODE=\"$node\" /bin/bash \"scripts/clean-old.sh\" </dev/tty\n          ret=$?\n        fi\n      fi\n\n      if [ $ret -ne 0 ]; then\n        echo \"Aborted 0.x cleanup.  Exiting.\" >&2\n        exit $ret\n      fi) \\\n  && (if [ \"x$configures\" = \"x\" ]; then\n        (exit 0)\n      else\n        echo \"./configure \"$configures\n        echo \"$configures\" > npmrc\n      fi) \\\n  && (if [ \"$make\" = \"NOMAKE\" ]; then\n        (exit 0)\n      elif \"$make\" uninstall install; then\n        (exit 0)\n      else\n        make=\"NOMAKE\"\n      fi\n      if [ \"$make\" = \"NOMAKE\" ]; then\n        \"$node\" cli.js rm npm -gf\n        \"$node\" cli.js install -gf\n      fi) \\\n  && cd \"$BACK\" \\\n  && rm -rf \"$TMP\" \\\n  && echo \"It worked\"\n\nret=$?\nif [ $ret -ne 0 ]; then\n  echo \"It failed\" >&2\nfi\nexit $ret\n"]],"start1":0,"start2":0,"length1":0,"length2":7882}]],"length":7882}
