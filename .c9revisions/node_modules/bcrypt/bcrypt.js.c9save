{"ts":1376875376292,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var bindings = require('bindings')('bcrypt_lib');\n\n/// generate a salt (sync)\n/// @param {Number} [rounds] number of rounds (default 10)\n/// @param {Number} [seed_length] number of random bytes (default 20)\n/// @return {String} salt\nmodule.exports.gen_salt_sync = function(rounds, seed_length) {\n  console.log(\"DEPRECATION WARNING: `gen_salt_sync` has been deprecated. Please use `genSaltSync` instead.\");\n\n  return module.exports.genSaltSync(rounds, seed_length);\n}\n\nmodule.exports.genSaltSync = function(rounds, seed_length) {\n    // default 10 rounds\n    if (!rounds) {\n        rounds = 10;\n    } else if (typeof rounds !== 'number') {\n        throw new Error('rounds must be a number');\n    }\n\n    // default length 20\n    if (!seed_length) {\n        seed_length = 20;\n    } else if (typeof seed_length !== 'number') {\n        throw new Error('seed_length must be a number');\n    }\n\n    return bindings.gen_salt_sync(rounds, seed_length);\n};\n\n/// generate a salt\n/// @param {Number} [rounds] number of rounds (default 10)\n/// @param {Number} [seed_length] number of random bytes (default 20)\n/// @param {Function} cb callback(err, salt)\nmodule.exports.gen_salt = function(rounds, seed_length, cb) {\n  console.log(\"DEPRECATION WARNING: `gen_salt` has been deprecated. Please use `genSalt` instead.\");\n\n  return module.exports.genSalt(rounds, seed_length, cb);\n}\n\nmodule.exports.genSalt = function(rounds, seed_length, cb) {\n    // if callback is first argument, then use defaults for others\n    if (typeof arguments[0] === 'function') {\n        // have to set callback first otherwise arguments are overriden\n        cb = arguments[0];\n        rounds = 10;\n        seed_length = 20;\n    // callback is second argument\n    } else if (typeof arguments[1] === 'function') {\n        // have to set callback first otherwise arguments are overriden\n        cb = arguments[1];\n        seed_length = 20;\n    }\n\n    // default 10 rounds\n    if (!rounds) {\n        rounds = 10;\n    } else if (typeof rounds !== 'number') {\n        return cb(new Error('rounds must be a number'));\n    }\n\n    // default length 20\n    if (!seed_length) {\n        seed_length = 20;\n    } else if (typeof seed_length !== 'number') {\n        return cb(new Error('seed_length must be a number'));\n    }\n\n    if (!cb) {\n        return;\n    }\n\n    return bindings.gen_salt(rounds, seed_length, cb);\n};\n\n/// hash data using a salt\n/// @param {String} data the data to encrypt\n/// @param {String} salt the salt to use when hashing\n/// @return {String} hash\nmodule.exports.encrypt_sync = function(data, salt) {\n  console.log(\"DEPRECATION WARNING: `encrypt_sync` has been deprecated. Please use `hashSync` instead.\");\n\n  return module.exports.hashSync(data, salt);\n}\n\nmodule.exports.hashSync = function(data, salt) {\n    if (data == null || data == undefined || salt == null || salt == undefined) {\n        throw new Error('data and salt arguments required');\n    } else if (typeof data !== 'string' && (typeof salt !== 'string' || typeof salt !== 'number')) {\n        throw new Error('data must be a string and salt must either be a salt string or a number of rounds');\n    }\n\n    if (typeof salt === 'number') {\n      salt = module.exports.genSaltSync(salt);\n    }\n\n    return bindings.encrypt_sync(data, salt);\n};\n\n/// hash data using a salt\n/// @param {String} data the data to encrypt\n/// @param {String} salt the salt to use when hashing\n/// @param {Function} cb callback(err, hash)\nmodule.exports.encrypt = function(data, salt, cb) {\n  console.log(\"DEPRECATION WARNING: `encrypt` has been deprecated. Please use `hash` instead.\");\n\n  return module.exports.hash(data, salt, cb);\n}\n\nmodule.exports.hash = function(data, salt, cb) {\n    if (typeof data === 'function') {\n        return data(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n    }\n    if (typeof salt === 'function') {\n        return salt(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n    }\n    if (data == null || data == undefined || salt == null || salt == undefined) {\n        return cb(new Error('data and salt arguments required'));\n    } else if (typeof data !== 'string' && (typeof salt !== 'string' || typeof salt !== 'number')) {\n        return cb(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n    }\n\n    if (!cb || typeof cb !== 'function') {\n        return;\n    }\n\n    if (typeof salt === 'number') {\n      return module.exports.genSalt(salt, function(err, salt) {\n        return bindings.encrypt(data, salt, cb);\n      });\n    }\n\n    return bindings.encrypt(data, salt, cb);\n};\n\n/// compare raw data to hash\n/// @param {String} data the data to hash and compare\n/// @param {String} hash expected hash\n/// @return {bool} true if hashed data matches hash\nmodule.exports.compare_sync = function(data, hash) {\n  console.log(\"DEPRECATION WARNING: `compare_sync` has been deprecated. Please use `compareSync` instead.\");\n\n  return module.exports.compareSync(data, hash);\n}\n\nmodule.exports.compareSync = function(data, hash) {\n    if (data == null || data == undefined || hash == null || hash == undefined) {\n        throw new Error('data and hash arguments required');\n    } else if (typeof data !== 'string' || typeof hash !== 'string') {\n        throw new Error('data and hash must be strings');\n    }\n\n    return bindings.compare_sync(data, hash);\n};\n\n/// compare raw data to hash\n/// @param {String} data the data to hash and compare\n/// @param {String} hash expected hash\n/// @param {Function} cb callback(err, matched) - matched is true if hashed data matches hash\nmodule.exports.compare = function(data, hash, cb) {\n    if (data == null || data == undefined || hash == null || hash == undefined) {\n        return cb(new Error('data and hash arguments required'));\n    } else if (typeof data !== 'string' || typeof hash !== 'string') {\n        return cb(new Error('data and hash must be strings'));\n    }\n\n    if (!cb || typeof cb !== 'function') {\n        return;\n    }\n\n    return bindings.compare(data, hash, cb);\n};\n\n/// @param {String} hash extract rounds from this hash\n/// @return {Number} the number of rounds used to encrypt a given hash\nmodule.exports.get_rounds = function(hash) {\n  console.log(\"DEPRECATION WARNING: `get_rounds` has been deprecated. Please use `getRounds` instead.\");\n\n  return module.exports.getRounds(hash);\n}\n\nmodule.exports.getRounds = function(hash) {\n    if (hash == null || hash == undefined) {\n        throw new Error('hash argument required');\n    } else if (typeof hash !== 'string') {\n        throw new Error('hash must be a string');\n    }\n\n    return bindings.get_rounds(hash);\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":6720}]],"length":6720}
